<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzzz.dao.CourseDao">
  <sql id="all_columns">
    course_id, enterprise_id, name, detail, img_url, category_id, release_time, price, status
  </sql>
  <insert id="insert">
    insert into course(enterprise_id, name, detail, img_url, category_id, release_time, price, status)
    values(#{enterpriseId}, #{name}, #{detail}, #{imgUrl}, #{categoryId}, #{releaseTime}, #{price}, #{status})
  </insert>
  <select id="checkExistenceById" resultType="boolean">
    select count(*)
    from course
    where course_id=#{courseId}
  </select>
  <select id="getById" parameterType="long" resultType="Course">
    select <include refid="all_columns" />
    from course
    where course_id=#{courseId}
  </select>
  <select id="getVoById" parameterType="long" resultType="com.zzzz.vo.CourseDetail">
    select course_id, name, detail, img_url,
      category_id, category_name,
      release_time, price, status,
      course_offering_id 'course_offerings.course_offering_id',
      branch_id 'course_offerings.branch_id',
      branch_name 'course_offering.branch_name',
      lecturer_id 'course_offerings.lecturer_id',
      lecturer_name 'course_offerings.lecturer_name'
    from view_course_detail
    where course_id=#{courseId}
  </select>
  <update id="update" parameterType="Course">
    update course set
      name=#{name},
      detail=#{detail},
      img_url=#{imgUrl},
      category_id=#{categoryId},
      release_time=#{releaseTime},
      price=#{price},
      status=#{status}
    where course_id=#{courseId}
  </update>
  <select id="countTotal" parameterType="map" resultType="long">
    select count(*)
    from (select distinct course_id, name, img_url, category_id, category_name, release_time, price
          from view_course_detail
          <where>
            and enterprise_id=#{enterpriseId}
            <if test="courseId != null">
              and course_id=#{courseId}
            </if>
            <if test="nameContaining != null">
              and name like '%' ${nameContaining} '%'
            </if>
            <if test="categoryId != null">
              and category_id=#{categoryId}
            </if>
            <if test="priceMin != null">
              and price > #{priceMin}
            </if>
            <if test="priceMax != null">
              and price &lt; #{priceMax}
            </if>
            <if test="status != null">
              and status=#{status}
            </if>
          </where>
    ) c
  </select>
  <select id="list" parameterType="map" resultType="com.zzzz.vo.CourseDetail">
    select distinct course_id, name, img_url, category_id, category_name, release_time, price, status
    from view_course_detail
    <where>
      and enterprise_id=#{enterpriseId}
      <if test="courseId != null">
        and course_id=#{courseId}
      </if>
      <if test="nameContaining != null">
        and name like '%' ${nameContaining} '%'
      </if>
      <if test="categoryId != null">
        and category_id=#{categoryId}
      </if>
      <if test="priceMin != null">
        and price > #{priceMin}
      </if>
      <if test="priceMax != null">
        and price &lt; #{priceMax}
      </if>
      <if test="status != null">
        and status=#{status}
      </if>
    </where>
    <if test="usePagination">
      limit #{starting}, #{pageSize}
    </if>
  </select>
  <select id="listLatest" parameterType="map" resultType="com.zzzz.vo.CourseDetail">
    select distinct course_id, name, img_url, category_id, category_name, release_time, price, status
    from view_course_detail
    where enterprise_id=#{enterpriseId}
      and status='AVAILABLE'
    order by release_time desc
    limit 0, #{n}
  </select>
</mapper>